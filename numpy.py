# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uma0aClL5F6yNbysIDiiTtJtuVOuRM4Y
"""

import numpy as np
from math import sqrt, pow

"""**Задача 1.**

Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющая евклидово расстояние ( https://ru.wikipedia.org/wiki/%D0%95%D0%B2%D0%BA%D0%BB%D0%B8%D0%B4%D0%BE%D0%B2%D0%B0_%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D0%BA%D0%B0 ) между точкой (x1,y1) и (x2,y2).
"""

def distance(x1, y1, x2, y2):
  return sqrt(pow(x1 - y1, 2) + pow(x2 - y2, 2))

print(distance(3, 4, 5, 8))

"""**Задача 2.**

Написать функцию season(month), принимающую 1 аргумент — номер месяца (от 1 до 12), которая присваивает глобальной переменной s время года, которому этот месяц принадлежит (зима, весна, лето или осень).
"""

s = None
def  season(month):
  global s
  if 3 <= month <= 5:
    s = 'spring'
    return s
  elif 6 <= month <= 8:
    s = 'summer'
    return s
  elif 9 <= month <= 11:
    s = 'fall' 
    return s
  else: 
    s = 'winter'
    return s

season(4)
print(s)

season(10)
print(s)

"""**Задача 3.**

Написать функцию is_prime, принимающую 1 аргумент — число от 0 до 1000, и возвращающую True, если оно простое, и False - иначе.
"""

def is_prime(number):
  if number == 1:
    return False
  for devidener in range(2, number - 1):
    if number % devidener == 0:
      return False
  return True
  
print(is_prime(97))
print(is_prime(534))

"""**Задача 4.**

Написать функцию reverse_list(lst), которая принимает в качестве аргумента список и возвращаем его в перевернутом виде.

Например,
- исходный список:  8, 1, 0, 4
- полученный список: 4, 0, 1, 8

Использовать встроенные функции Python нельзя. 
"""

def reverse_list(lst):
  return lst[::-1]

print(reverse_list([8, 1, 0, 4]))

"""**Задача 5.**

Распечатайте с 4 по 8 символ фразы "Привет мир!" приведенные к верхнему регистру.
"""

print('Привет мир!'[2:9].upper())

"""Задача 6.

Напишите код, который все элементы массива x с нечетными индексами переставит в обратном порядке.

Т.е. если x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], то код должен получать [0, 9, 2, 7, 4, 5, 6, 3, 8, 1]
"""

def reverse_odd(array):
  for i in range(1, int(len(array) // 2 + 1), 2):
    temp = array[i]
    array[i] = array[len(array) - i - len(array) % 2]
    array[len(array) - i - len(array) % 2] = temp
  return array

print(reverse_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(reverse_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))

"""**Задача 7.**

Напишите цикл, который выводит все числа от 0 до 500, делящиеся на 7, если в них есть цифра 8.
"""

for i in range(0, 501):
  if i % 7 == 0:
    i_str = (str(i))
    for j in range(0, len(i_str)):
      if int(i_str[j]) == 8:
        print(i)
        break

"""**Задача 8.**

На вход функция more_than_five(lst) получает список из целых чисел. Результатом работы функции должен стать новый список, в котором содержатся только те числа, которые больше 10 по модулю.
"""

def more_than_five(lst: list):
  return list(filter(lambda number : abs(number) > 10, lst))

print(more_than_five([5, 7, -100, -4, 78, 34, 12, -45, 56, -15, 10, -10, -34, -23, -12, 83]))

"""# Задания

**Задача 1.**

Создать матрицу размером `10х10` с 0 внутри, и 1 на границах. Например для `3х3`.

```
1 1 1
1 0 1
1 1 1
```
"""

matrix = np.ones((10, 10), 'int')
matrix[1:]
for i in range(0, 10):
  matrix[0, i] = matrix[9, i] = 1
for i in range(1, 9):
  matrix[i, 0] = matrix[i, 9] = 1
matrix

"""**Задача 2.**

Создать 5x5 матрицу с 1,2,3,4 над диагональю. Все остальные элементы - 0.
"""

matrix = np.diag(np.arange(1, 5), k = 1)
print(matrix)

"""**Задача 3.**

Создайте случайную матрицу и вычтите из каждой строки среднее.
"""

matrix = 10 * np.random.randn(4, 5)
print(matrix, end = '\n\n')
for row in matrix:
  print('\t\tmean = ', np.mean(row))
  row -= np.mean(row)
print('\n', matrix)

"""**Задача 4.**

Написать функцию, принимающую на вход массив и меняющую знак у элементов, значения которых между 3 и 8. Протестировать на нескольких заданных вами массивах.
"""

def sign_exchenge(array):
  array[(array > 3) & (array < 8)] *= -1
  return array

array = np.array([1, 5, 7, 8, 3, 9, 23, 98, 5, 3, 6, 3, -3, -5, -87,-4, 3, 5])
print(sign_exchenge(array))

"""**Задача 4.**

Написать функцию, принимающую на вход массив и вычитающую среднее из каждой строки в матрице. Протестировать на нескольких заданных вами примерах.
"""

def minus_mean(matrix):
  for row in matrix:
    row -= np.mean(row)
  return matrix

matrix = 20 * np.random.randn(5, 3)
print(matrix, end = '\n\n')
print(minus_mean(matrix))

"""**Задача 5.**

Дан вектор [1, 2, 3, 4, 5], построить новый вектор с тремя нулями между каждым значением.
"""

vector = np.arange(1, 6)
new_vector = np.zeros(len(vector) + (len(vector) - 1) * 3, int)
new_vector[::4] = vector
print(new_vector)

"""**Задача 6.**


Написать функцию, принимающую на вход матрицу MxN и меняющую 2 любые строки в матрице. Протестировать на нескольких заданных вами примерах.
"""

def exchenge_rows(matrix):
  row1 = np.random.randint(len(matrix))
  row2 = np.random.randint(len(matrix))
  while row1 == row2:
    row2 = np.random.randint(len(matrix))
  print(f'Switching rows {row1} and {row2}\n')
  matrix[[row1, row2]] = matrix[[row2, row1]] 
  return matrix

matrix = np.random.randint(100, size = (7, 4))
print(matrix, '\n')
print(exchenge_rows(matrix))

"""**Задача 7.**

Написать функцию, принимающую на вход одномерный массив и возвращающую наиболее частое значение в массиве и частоту его встречи. Протестировать на нескольких заданных вами примерах.
"""

def number_freq(array):
  values, counts = np.unique(array, return_counts=True)
  i_max = np.argmax(counts)
  return values[i_max], counts[i_max]

array = np.random.randint(10, size = 20)
print(array)
print(number_freq(array))

"""**Задача 8.** 

Написать функцию, принимающую на вход  массив 16x16 и считающую сумму по блокам 4x4. Протестировать на нескольких заданных вами примерах.
"""

def sum_of_fours(matrix):
  for i in range(2):
    for j in range(2):
      temp = matrix[i*4:(i+1)*4, j*4:(j+1)*4]
      print(temp, '\n', np.sum(temp),'\n')

matrix = np.random.randint(100, size=(16, 16))
print(matrix, end='\n\n')
sum_of_fours(matrix)

"""**Задача 9.**

Написать функцию, принимающую на вход матрицу и возвращающую n наибольших значений в массиве. n вводится с клавиатуры. Протестировать на нескольких заданных вами примерах.
"""

def max_values(matrix, n):
  return np.partition(a, n)[n:]

n = int(input('Enter amount of big values you want to find: '))
a = np.random.randint(100, size = n * 2)
print(a)
print(max_values(a, n))

""" **Задача 10.**

Написать функцию, принимающую на вход 10x3 матрица и находящую строки из неравных значений (например [2,2,3]). Протестировать на нескольких заданных вами примерах.
"""

def find_unequal(matrix):
  is_equal = np.logical_and.reduce(matrix[:,1:] == matrix[:,:-1], axis=1)
  return matrix[~is_equal]

matrix = np.random.randint(2, size=(10, 3))
print(matrix, '\n')
print(find_unequal(matrix))

"""Задача 11.

Написать функцию, принимающую на вход двумерный массив и находящую все различные строки. Протестировать на нескольких заданных вами примерах.
"""

def find_unique(matrix):
  return np.unique(matrix, axis=0)

matrix = np.random.randint(2, size=(10, 5))
print(matrix, '\n')
print(find_unique(matrix))

"""**Задача 12.**

Написать функцию, принимающую на вход два вектора одинакого размера и считающую расстояние между векторами. Протестировать на нескольких заданных вами примерах.
"""

def distance(vec1, vec2):
  return np.linalg.norm(vec1 - vec2)

vec1 = np.random.randint(10, size=5)
vec2 = np.random.randint(10, size=5)
print(f'{vec1}\n{vec2}\n{distance(vec1, vec2)}')

""" **Задача 13.**

Написать функцию, принимающую на вход два вектора одинакого размера и находящую косинус угла между векторами. Протестировать на нескольких заданных вами примерах.
"""

def cos(vec1, vec2):   
  return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))     
        
vec1 = np.random.randint(10, size=5)
vec2 = np.random.randint(10, size=5)     
print(f'{vec1}\n{vec2}\n{cos(vec1, vec2)}')

"""**Задача 14.**

Написать функцию, принимающую на вход вектор A содержит float числа как больше, так и меньше нуля.

Функция должна округлить их до целых и результат записать в глобальную переменную Z. Округление должно быть "от нуля", т.е.:

- положительные числа округляем всегда вверх до целого
- отрицательные числа округляем всегда вниз до целого
- 0 остаётся 0

 Протестировать на нескольких заданных вами примерах.

"""

Z = None

def round(vec):
  global Z
  Z = np.where(vec < 0, np.floor(vec),
               np.where(vec > 0, np.ceil(vec), vec))

A = 20 * np.random.randn(10)
print(A)
round(A)
print(Z)

"""**Задача 15.**

Написать функцию, принимающую на вход 2 вектора целых чисел A и B.

Функция должна находить числа, встречающиеся в обоих векторах и добавлять их по возрастанию в глобальную переменную - вектор Z.

Если пересечений нет, то вектор Z будет пустым.

 Протестировать на нескольких заданных вами примерах.
"""

Z = None

def same_values(vec1, vec2):
  global Z
  Z = np.intersect1d(vec1, vec2)

vec1 = np.random.randint(10, size=10)
vec2 = np.random.randint(10, size=10)
print(f'{vec1}\n{vec2}\n')
same_values(vec1, vec2)
print(Z)

"""**Задача 16.**

Написать функцию, принимающую на вход вектор и возвращающую максимальный элемент в векторе среди элементов, перед которыми стоит 0. 

Например для:

`x = np.array([6, 2, 0, 3, 0, 0, 5, 7, 0])`

Ответ:
5
"""

def max_after_zero(vec):
  zeros = (vec == 0)
  return np.max(vec[1:][zeros[:-1]])

vec = np.array([6, 2, 0, 3, 0, 0, 5, 7, 0])
print(max_after_zero(vec))

"""**Задача 17.**

Написать функцию, принимающую на вход матрицу 5х3 и считающую длину каждого вектора в матрице (строка) и ищущую самый длинный вектор, вернуть его координаты и длину.

Как выглядит матрица:

```   
     | x | y | z |
     | 1 | 2 | 3 |
     | 3 | 4 | 1 |
     | ...       |
```
"""

def longest_vector(matrix):
  norms = np.linalg.norm(matrix, axis=1)
  return matrix[np.where(norms == norms.max())[0][0]], norms.max()

matrix = np.random.randint(10, size=(5, 3))
print(matrix, '\n')
longest_vec = longest_vector(matrix)
print(f'{longest_vec[0]}\n{longest_vec[1]}')
